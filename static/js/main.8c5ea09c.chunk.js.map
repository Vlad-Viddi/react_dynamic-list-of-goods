{"version":3,"sources":["helpers/getGoods.ts","components/GoodsList.tsx","App.tsx","index.tsx"],"names":["getGoods","a","fetch","response","json","data","GoodsList","goods","map","id","color","name","key","style","App","useState","setGoods","loadingError","setLoadingError","errorMessage","type","onClick","then","catch","goodsFromServer","sort","b","localeCompare","slice","filter","good","ReactDOM","render","document","getElementById"],"mappings":"uPASaA,EAAQ,uCAAG,8BAAAC,EAAA,sEACCC,MARP,yEAOM,cAChBC,EADgB,gBAEHA,EAASC,OAFN,cAEhBC,EAFgB,yBAIfA,GAJe,2CAAH,qDCFRC,EAA6B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3C,OACE,oCACE,4BACGA,EAAMC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAd,OACT,wBAAIC,IAAKH,EAAII,MAAO,CAAEH,UAClBC,SC6FCG,EApGH,WAAO,IAAD,EACUC,mBAAiB,IAD3B,mBACTR,EADS,KACFS,EADE,OAEwBD,oBAAkB,GAF1C,mBAETE,EAFS,KAEKC,EAFL,KAIVC,EAAe,kDAuBrB,OACE,oCACE,qDACCF,EACGE,EAEA,oCACE,kBAAC,EAAD,CAAWZ,MAAOA,IAClB,4BAAQa,KAAK,SAASC,QA7BX,WACnBrB,IACGsB,KAAKN,GACLO,OAAM,kBAAML,GAAgB,QA0BvB,YACA,4BAAQE,KAAK,SAASC,QAjBlB,WACZrB,IACGsB,MAAK,SAAAE,GAAe,OAAIA,EACtBC,MAAK,SAACxB,EAAGyB,GAAJ,OAAUzB,EAAEU,KAAKgB,cAAcD,EAAEf,SAAOiB,MAAM,EAAG,MACxDN,KAAKN,GACLO,OAAM,kBAAML,GAAgB,QAYvB,UACA,4BAAQE,KAAK,SAASC,QAzBhB,WACdrB,IACGsB,MAAK,SAAAE,GAAe,OAAIA,EAAgBK,QAAO,SAAAC,GAAI,MAAmB,QAAfA,EAAKpB,YAC5DY,KAAKN,GACLO,OAAM,kBAAML,GAAgB,QAqBvB,eCvCZa,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.8c5ea09c.chunk.js","sourcesContent":["import { Good } from '../components/TypeDefinitions';\n\nconst GOODS_URL = 'https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json';\n\n// export const getGoods = (): Promise<Good[]> => {\n//   return fetch(GOODS_URL)\n//     .then(response => response.json());\n// };\n\nexport const getGoods = async (): Promise<Good[]> => {\n  const response = await fetch(GOODS_URL);\n  const data = await response.json();\n\n  return data;\n};\n","import React from 'react';\nimport { Good } from './TypeDefinitions';\n\ntype Props = {\n  goods: Good[];\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => {\n  return (\n    <>\n      <ul>\n        {goods.map(({ id, color, name }) => (\n          <li key={id} style={{ color }}>\n            { name }\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getGoods } from './helpers/getGoods';\nimport { GoodsList } from './components/GoodsList';\nimport { Good } from './components/TypeDefinitions';\n\nconst App = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [loadingError, setLoadingError] = useState<boolean>(false);\n\n  const errorMessage = <p>Sorry, no data here</p>;\n\n  const loadAllGoods = () => {\n    getGoods()\n      .then(setGoods)\n      .catch(() => setLoadingError(true));\n  };\n\n  const loadRed = () => {\n    getGoods()\n      .then(goodsFromServer => goodsFromServer.filter(good => good.color === 'red'))\n      .then(setGoods)\n      .catch(() => setLoadingError(true));\n  };\n\n  const load5 = () => {\n    getGoods()\n      .then(goodsFromServer => goodsFromServer\n        .sort((a, b) => a.name.localeCompare(b.name)).slice(0, 5))\n      .then(setGoods)\n      .catch(() => setLoadingError(true));\n  };\n\n  return (\n    <>\n      <h1>Dynamic list of Goods</h1>\n      {loadingError\n        ? errorMessage\n        : (\n          <>\n            <GoodsList goods={goods} />\n            <button type=\"button\" onClick={loadAllGoods}>Load all</button>\n            <button type=\"button\" onClick={load5}>Load 5</button>\n            <button type=\"button\" onClick={loadRed}>Load RED</button>\n          </>\n        )}\n    </>\n  );\n};\n\n\n// class App2 extends React.Component<{}, AppState> {\n//   state ={\n//     goods: [],\n//     loadingError: false,\n//   };\n\n//   errorMessage = <p>Sorry, no data here</p>;\n\n//   setGoods = (goods: Good[]) => {\n//     setTimeout(() => this.setState({\n//       goods,\n//       loadingError: false,\n//     }), 1000);\n//   };\n\n//   loadAllGoods = () => {\n//     getGoods()\n//       .then(this.setGoods)\n//       .catch(() => this.setState({ loadingError: true }));\n//   };\n\n//   loadRed = () => {\n//     getGoods()\n//       .then(goods => goods.filter(good => good.color === 'red'))\n//       .then(this.setGoods)\n//       .catch(() => this.setState({ loadingError: true }));\n//   };\n\n//   load5 = () => {\n//     getGoods()\n//       .then(goods => goods.sort((a, b) => a.name.localeCompare(b.name)).slice(0, 5))\n//       .then(this.setGoods)\n//       .catch(() => this.setState({ loadingError: true }));\n//   };\n\n//   render() {\n//     return (\n//       <>\n//         <h1>Dynamic list of Goods</h1>\n//         {this.state.loadingError\n//           ? this.errorMessage\n//           : (\n//             <>\n//               <GoodsList goods={this.state.goods} />\n//               <button type=\"button\" onClick={this.loadAllGoods}>Load all</button>\n//               <button type=\"button\" onClick={this.load5}>Load 5</button>\n//               <button type=\"button\" onClick={this.loadRed}>Load RED</button>\n//             </>\n//           )}\n//       </>\n//     );\n//   }\n// }\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}